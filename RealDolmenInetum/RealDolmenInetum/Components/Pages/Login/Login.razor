@page "/"
@using ModelLibrary.Dto
@using RealDolmenInetum.Components.Layout
@using System.Text.Json
@inject HttpClient Http
@layout LoginLayout
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject AuthService auth

<PageTitle>Inloggen - Realdolmen Inetum</PageTitle>


<EditForm Model="@userLoginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="vh-100 d-flex justify-content-center align-items-center">
        <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-4">
            <div class="shadow">
                <div class="card-body bg-white rounded-3 ">
                    <MudText Typo="Typo.h3" Align="Align.Center">Login</MudText>

                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" class="form-control"  @bind-Value="userLoginModel.Email" />
                    </div>

                    <div class="form-group">
                        <label for="password">Password</label>
                        <InputText id="password" class="form-control" @bind-Value="userLoginModel.Password" type="password" />
                    </div>
                    <div class="d-flex justify-content-end">
                    <MudButton Class="mt-2 mb-2" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon=@Icons.Material.Filled.Login Color="Color.Primary">Login</MudButton>
                    </div>
                    <p class="text-center text-danger mt-3">@errorMessage</p>
                </div>
                
            </div>
        </div>
    </div>
</EditForm>





@code {
    private UserLoginDto userLoginModel = new UserLoginDto();
    private string errorMessage = "";
    private bool shouldShowInvalidLoginAlert = false;

    private async Task HandleLogin(EditContext editContext)
    {
        var response = await Http.PostAsJsonAsync("https://localhost:7256/user/login", userLoginModel);
        if (response.IsSuccessStatusCode)
        {
            var token = await response.Content.ReadAsStringAsync();
            token.Trim().Trim('"');

            auth.SetToken(token);
            await LocalStorage.SetItemAsync("authToken", token);

            NavigationManager.NavigateTo("/home");
        }
        else
        {
            errorMessage = "Failed to log in. Please check your credentials and try again.";
            userLoginModel.Email = "adil@gmail.com";
            userLoginModel.Password = "Test123!";
        }
    }

    // CHECKT OF DE TOKEN AL BESTAAT ZODAT JE REDIRECT ALS JE AL INGELOGD ZIJT.
    /*
    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
        var tokenSaved = await LocalStorage.GetItemAsStringAsync("authToken");
        auth.SetToken(tokenSaved);
        if (auth.GetToken() != null)
            {
            NavigationManager.NavigateTo("/home");
    }
    }*/
}
