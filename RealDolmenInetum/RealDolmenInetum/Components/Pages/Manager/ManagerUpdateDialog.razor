@using ModelLibrary.Dto
@using System.Text.Json
@using System.Text;
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudDialog>
    <DialogContent>
        <div style="display: flex; align-items: center; gap: 8px;">
            <MudTextField T="string" Label="Zoek bencher" @bind-Value="searchTerm" Style="flex-grow: 1;"></MudTextField>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PerformSearch">Zoek</MudButton>
        </div>

        @if (searchPerformed)
        {
        @if (suggestedUsers.Any())
        {
            <MudPaper Width="300px">
                <MudList Clickable="true">
                    @foreach (var user in suggestedUsers)
                    {
                        <MudListItem @onclick="() => SelectUser(user)" Text="@($"{user.Username} ({user.Mail})")" />
                    }
                </MudList>
            </MudPaper>
        }
            else if (searchPerformed && !selectedBenchId.HasValue)
            {
                <p>Geen actieve bencher gevonden.</p>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Confirm</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private string searchTerm;
    private List<BencherDto> suggestedUsers = new List<BencherDto>();
    private bool searchPerformed = false;
    private int? selectedBenchId;
    [Parameter] public int? BenchId { get; set; }
    [Parameter] public EventCallback OnDialogClose { get; set; }

    [CascadingParameter] MudDialogInstance DialogService { get; set; }

    private async Task PerformSearch()
    {
        searchPerformed = true;
        suggestedUsers = await SearchUsersByEmail(searchTerm);
        StateHasChanged();
    }

    private async Task<List<BencherDto>> SearchUsersByEmail(string email)
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7256/user/bench/search?email={email}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var users = JsonConvert.DeserializeObject<List<BencherDto>>(content);
                return users ?? new List<BencherDto>();
            }
            else
            {
                Console.WriteLine($"Server error during search: {await response.Content.ReadAsStringAsync()}");
                return new List<BencherDto>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in search: {ex.Message}");
            return new List<BencherDto>();
        }
    }

    private void SelectUser(BencherDto user)
    {
        selectedBenchId = user.BenchId;
        Console.WriteLine($"Selected User: {user.Username}");
        searchTerm = $"{user.Username} ({user.Mail})";
        suggestedUsers.Clear();
        StateHasChanged();
    }

    void Cancel() => DialogService.Close(DialogResult.Cancel());

    void Submit()
    {
        if (selectedBenchId.HasValue)
        {
            // Check if BenchId is null, and call a different function if it is
            if (BenchId == 0)
            {
                // Call another function to handle when there is no old manager
                UpdateNewManagerStatus(selectedBenchId.Value, true).ContinueWith(async task =>
                {
                    if (task.Result)
                    {
                        Snackbar.Add("New bench manager set successfully.", Severity.Success);
                        await OnDialogClose.InvokeAsync();
                        DialogService.Close(DialogResult.Ok(true));
                    }
                    else
                    {
                        Snackbar.Add("Error setting new bench manager.", Severity.Error);
                    }
                }, TaskScheduler.FromCurrentSynchronizationContext());
            }
            else
            {
                // Proceed with updating both managers as previously handled
                UpdateBenchManagers(BenchId.Value, selectedBenchId.Value).ContinueWith(async task =>
                {
                    if (task.Result)
                    {
                        Snackbar.Add("Bench managers updated successfully.", Severity.Success);
                        await OnDialogClose.InvokeAsync();
                        DialogService.Close(DialogResult.Ok(true));
                    }
                    else
                    {
                        Snackbar.Add("Error updating bench managers.", Severity.Error);
                    }
                }, TaskScheduler.FromCurrentSynchronizationContext());
            }
        }
        else
        {
            Snackbar.Add("No bencher selected.", Severity.Warning);
        }
    }

    private async Task<bool> UpdateNewManagerStatus(int benchId, bool newStatus)
    {
        var url = $"https://localhost:7256/user/bench/updateManager/{benchId}/{newStatus}";
        var response = await Http.PutAsync(url, null);
        return response.IsSuccessStatusCode;
    }

    private async Task<bool> UpdateBenchManagers(int oldManagerId, int newManagerId)
    {
        var url = $"https://localhost:7256/user/bench/updateManagers?oldManagerId={oldManagerId}&newManagerId={newManagerId}";
        var response = await Http.PutAsync(url, null);
        return response.IsSuccessStatusCode;
    }
}


