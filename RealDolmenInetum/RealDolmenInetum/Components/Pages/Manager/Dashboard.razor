@page "/home"
@using ModelLibrary.Models
@using ModelLibrary.Dto
@using ModelLibrary.ViewModels
@using Newtonsoft.Json
@using Helper
@inject HttpClient Http
@rendermode InteractiveServer
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthService auth
@inject IDialogService DialogService

<PageTitle>Dashboard</PageTitle>

@if (currentUserId == currentManagerUserId.ToString() || rol == "admin" || rol == "manager")
{
<div class="btnToevoegenMobile">
    <MudButton Href="/toevoegen" FullWidth="true" Variant="Variant.Filled" StartIcon="@Icons.Material.Rounded.PersonAdd" Color="Color.Primary">Toevoegen</MudButton>
</div>

<div id="btnToevoegenComputer">
    <MudFab Href="/toevoegen" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" />
</div>

<MudGrid>
    <MudItem xs="12">
        <div class="card border-1 shadow-hover mb-20">
            <div class="card-body d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    <div class="pr-3">
                        <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Color="Color.Default" Size="Size.Large" />
                    </div>
                    <div>
                        <h5 class="mb-1">@managerName</h5>
                        <p class="mb-0 text-muted">Bench manager</p>
                    </div>
                </div>
                <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit">
                    Wijzigen
                </MudButton>
            </div>
        </div>
    </MudItem>
</MudGrid>

@if (usersOpBench != null && usersOpBench.Count > 0)
{
    @foreach (var userBench in usersOpBench)
    {
        <div class="col-md-12" id="userContainer">
            <div @onclick="() => NavigateUserPage(userBench.UserId)" id="userContainer" class="card border-1 shadow-hover mb-20">
                <div class="card-body d-flex align-items-center">
                    <div class="pr-3">
                        <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Default" Title="Person" Size="Size.Large" />
                    </div>
                    <div>
                        
                        <h5 class="mb-1">@userBench.Username</h5>
                        <p class="mb-0 text-muted"><MudIcon Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.Email" Title="Email" />@userBench.Mail</p>
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div>
                        <strong>Bench started:</strong>
                        <span>@userBench.StartBench.ToString("dd-MM-yyyy")</span>
                        <div>
                            <strong>Dagen op de bench:</strong> @DateHelper.CalculateDaysSince(userBench.StartBench)
                        </div>
                    </div>
                </div>
            </div>
        </div>
}
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p>@ErrorMessage</p>
}
else
{
    <MudAlert Class="mt-3" Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">
        <h4 class="alert-heading">De bench is leeg.</h4>
        <p>Er staat momenteel niemand op de bench.</p>
    </MudAlert>
    }
} else
{
    <div class="container mt-5">
        <div class="alert alert-danger" role="alert">
            U hebt niet de rechten om deze pagina te bekijken.
        </div>
    </div>
}

@code {
    public List<UserViewModel> usersOpBench;
    public HttpClient httpClient = new HttpClient();
    public string ErrorMessage = "";
    private int daysOnBench;
    private string managerName = "Laden...";
    private int managerBenchId;
    private string currentUserId;
    private int currentManagerUserId;
    private string rol;

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
        await FetchCurrentBenchManager();
        rol = auth.GetRolFromLoggedUser();
        currentUserId = auth.GetIdFromLoggedUser();
    }


    public async Task FetchData()
    {
        try
        {
            var token = auth.GetToken();

            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            }

            var response = await Http.GetAsync("https://localhost:7256/user/bench");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                usersOpBench = JsonConvert.DeserializeObject<List<UserViewModel>>(content);
            }
            else
            {
                ErrorMessage = "Alleen Admin kan dit zien!";
                usersOpBench = new List<UserViewModel>();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden: {ex.Message}";
            usersOpBench = new List<UserViewModel>();
        }

    }

    public void NavigateUserPage(int id)
    {
        NavigationManager.NavigateTo("/user/" + id);
    }

    private async Task FetchCurrentBenchManager()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7256/user/bench/CurrentBenchManager");
            if (response.IsSuccessStatusCode)
            {
                var manager = await response.Content.ReadFromJsonAsync<BenchManagerDto>();
                managerName = $"{manager.FirstName} {manager.LastName}";
                managerBenchId = manager.BenchId;
                currentManagerUserId = manager.userId;
            }
            else
            {
                managerName = "Er is momenteel geen Manager";
            }
        }
        catch (Exception ex)
        {
            managerName = "Fout bij het laden van gegevens";
            Console.WriteLine($"Error bij het ophalen van de huidige bench manager: {ex.Message}");
        }
    }

    private void OpenDialog()
    {
        var parameters = new DialogParameters
            {
                ["BenchId"] = managerBenchId,
                ["OnDialogClose"] = EventCallback.Factory.Create(this, FetchCurrentBenchManager)
            };
        DialogService.Show<ManagerUpdateDialog>("Bench Manager wijzigen", parameters);
    }
}
