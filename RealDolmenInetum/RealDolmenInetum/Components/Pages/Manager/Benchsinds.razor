@page "/user/{Id}"
@using ModelLibrary.ViewModels
@using ModelLibrary.Models
@using ModelLibrary.Dto
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject HttpClient Http
@inject ISnackbar Snackbar
@using System

<MudButton Href="/" FullWidth="true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary">Terug</MudButton>
<div class="card-body"> 
@if (usersDetails != null)
{
    <h3 class="text-center">@usersDetails.UserName op de bench sinds: @usersDetails.StartBench.ToString("dd-MM-yyyy") (@daysOnBench dagen)</h3>
    @if (usersDetails.ProjectDetails != null && usersDetails.ProjectDetails.Any())
    {
                <MudExpansionPanels MultiExpansion="true">
                        <MudExpansionPanel Text="Projectgeschiedenis">
                            <ul class="list-group">
                        @foreach (var detail in usersDetails.ProjectDetails)
                        {
                                <li class="list-group-item">@detail</li>
                        }
                    </ul>
                </MudExpansionPanel>
            </MudExpansionPanels>
    }
    else
    {
        <p>Nog geen projecten.</p>
    }
        <br>
    @if (usersDetails.OccupationDetails != null)
    {

                <MudExpansionPanels MultiExpansion="true">
                                        <MudExpansionPanel Text="Ocupatie">
                                            <li class="list-group-item">@usersDetails.OccupationDetails</li>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
    }
}
else
{
    <p>Gegevens worden geladen of zijn niet beschikbaar.</p>
}

</div>
<input type="number" @bind="benchId" class="form-control mb-2" placeholder="Bench ID" readonly />
<MudButton Href="/" FullWidth="true" @onclick="Einde" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Primary">Einde</MudButton>




@code {
    [Parameter]
    public string Id { get; set; }
    public UserDetailsViewModel usersDetails;
    public BenchViewModel benchView;
    public HttpClient httpClient = new HttpClient();
    private int benchId;
    public string ErrorMessage = "";
    private int daysOnBench;

    protected override async Task OnInitializedAsync()
    {
        await FetchUserData();
        await FetchUserBenchId();
    }
    public async Task FetchUserData()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7256/user/" + @Id);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                usersDetails = JsonConvert.DeserializeObject<UserDetailsViewModel>(content);

                // gebruik date helper om de aantal dagen since de startdate te berekenen
                if (usersDetails != null)
                {
                    daysOnBench = RealDolmenInetum.Helper.DateHelper.CalculateDaysSince(usersDetails.StartBench);
                }

                if (usersDetails.OccupationId.HasValue)
                {
                    var occupationResponse = await Http.GetAsync($"https://localhost:7256/occupation/{usersDetails.OccupationId.Value}");

                    //ophalen van occupation met een andere endpoint
                    if (occupationResponse.IsSuccessStatusCode)
                    {
                        var occupationContent = await occupationResponse.Content.ReadAsStringAsync();
                        var occupation = JsonConvert.DeserializeObject<Occupation>(occupationContent);
                        usersDetails.OccupationDetails = occupation.Type;
                    }
                }
            }
            else
            {
                ErrorMessage = "Fout bij het ophalen van gegevens uit de database.";
                usersDetails = new UserDetailsViewModel();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden: {ex.Message}";
            usersDetails = new UserDetailsViewModel();
        }
    }


    // TODO // DIALOG GEBRUIKEN OM DELETE TE BEVESTIGEN // TODO //
    private async Task Einde()
    {
        // tijdelijk via variable
        var url = $"https://localhost:7256/user/bench/end/{benchId}";

        var requestBody = new UpdateEndBenchDto
            {
                EndBench = DateTime.UtcNow
            };

        var content = JsonContent.Create(requestBody);

        var response = await Http.PutAsync(url, content);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Gebruiker zit niet meer op de bench!" , Severity.Success);
            NavigationManager.NavigateTo("/");

        }
        else
        {
            // Foutafhandeling
        }
    }

    private async Task FetchUserBenchId()
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7256/user/bench/user-bench/{Id}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var benchInfo = JsonConvert.DeserializeObject<BenchViewModel>(content); // Aan te maken ViewModel
                benchId = benchInfo.BenchId;
            }
            else
            {
                ErrorMessage = "Fout bij het ophalen van bench ID uit de database.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden bij het ophalen van bench ID: {ex.Message}";
        }
    }
}
