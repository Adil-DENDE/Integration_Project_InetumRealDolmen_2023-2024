@page "/user/{Id}"
@using ModelLibrary.ViewModels
@using ModelLibrary.Dto
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject HttpClient Http
@inject ISnackbar Snackbar

<a class="btn btn-success" @onclick="GoBack">
    <span class="oi oi-arrow-thick-left"></span> Terug
</a>

@if (usersDetails != null)
{
    <h3>@usersDetails.UserName zit op de bench sinds: @usersDetails.StartBench.ToString("dd-MM-yyyy")</h3>
}
else
{
    <p>Gegevens worden geladen of zijn niet beschikbaar.</p>
}

<input type="number" @bind="benchId" class="form-control mb-2" placeholder="Bench ID" readonly />
<button class="btn btn-success" @onclick="Einde">Einde</button>

@code {
    [Parameter]
    public string Id { get; set; }
    public UserDetailsViewModel usersDetails;
    public HttpClient httpClient = new HttpClient();
    private int benchId;
    public string ErrorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchUserData();
        await FetchUserBenchId();
    }
    public async Task FetchUserData()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7256/user/" + @Id);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                usersDetails = JsonConvert.DeserializeObject<UserDetailsViewModel>(content);
            }
            else
            {
                ErrorMessage = "Fout bij het ophalen van gegevens uit de database.";
                usersDetails = new UserDetailsViewModel();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden: {ex.Message}";
            usersDetails = new UserDetailsViewModel();
        }
    }



    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }


    // TODO // DIALOG GEBRUIKEN OM DELETE TE BEVESTIGEN // TODO //
    private async Task Einde()
    {
        // tijdelijk via variable
        var url = $"https://localhost:7256/user/bench/end/{benchId}";

        var requestBody = new UpdateEndBenchDto
            {
                EndBench = DateTime.UtcNow
            };

        var content = JsonContent.Create(requestBody);

        var response = await Http.PutAsync(url, content);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Gebruiker zit niet meer op de bench!" , Severity.Success);
            NavigationManager.NavigateTo("/");

        }
        else
        {
            // Foutafhandeling
        }
    }

    private async Task FetchUserBenchId()
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7256/user/bench/user-bench/{Id}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var benchInfo = JsonConvert.DeserializeObject<BenchViewModel>(content); // Aan te maken ViewModel
                benchId = benchInfo.BenchId;
            }
            else
            {
                ErrorMessage = "Fout bij het ophalen van bench ID uit de database.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden bij het ophalen van bench ID: {ex.Message}";
        }
    }

}
