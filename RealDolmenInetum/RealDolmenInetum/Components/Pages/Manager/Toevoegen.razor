@page "/toevoegen"
@using ModelLibrary.Dto
@using System.Text.Json
@using System.Text;
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<EditForm Model=formModel OnSubmit="Submit" FormName="formModel">
    <div class="form-group">
        <label for="Email">Zoek gebruiker op email:</label>
        <InputText id="Email" @bind-Value="formModel.Email" />
        <button type="button" @onclick="PerformSearch">Zoek</button>
    </div>
    @if (suggestedUsers.Any())
    {
        <ul class="suggestions-list">
            @foreach (var user in suggestedUsers)
            {
                <li @onclick="() => SelectUser(user)">@user.Email</li>
            }
        </ul>
    }
    else if (searchPerformed && !string.IsNullOrWhiteSpace(formModel.Email))
    {
        <p>Geen gebruikers gevonden.</p>
    }
    <div class="form-group">
        <label for="StartBench">Begindatum</label>
        <InputDate id="StartBench" @bind-Value="formModel.StartBench" />
    </div>
    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>



@code {
    [SupplyParameterFromForm]
    public UserBenchDto formModel { get; set; }
    private string searchTerm = string.Empty;
    private List<UserDto> suggestedUsers = new List<UserDto>();
    private UserDto? selectedUser = null;
    private bool searchPerformed = false;
    public string ErrorMessage = "";


    // NOUVELLE INSTANCE DU FORM
    protected override void OnInitialized() => formModel ??= new();


    private async Task Submit(EditContext editContext)
    {
        try
        {
            Console.WriteLine("Email=" + formModel.Email + ", DateTime=" + formModel.StartBench.ToString());
            var stringData = JsonConvert.SerializeObject(formModel);
            var stringContent = new StringContent(stringData, Encoding.UTF8, "application/json");
            Console.WriteLine(stringData);

            var httpResponseMessage = await Http.PostAsync("https://localhost:7256/user/bench/add", stringContent);

            if (httpResponseMessage.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "Het opslaan van de gegevens is mislukt. Probeer het opnieuw.";
                Console.WriteLine($"Serverfout: {await httpResponseMessage.Content.ReadAsStringAsync()}");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Er is een error opgetreden. Probeer het later opnieuw.";
            Console.WriteLine($"Uitzondering: {ex.Message}");
        }
    }



    // Methode die wordt aangeroepen bij elke wijziging van het zoekveld
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        formModel.Email = e.Value?.ToString() ?? string.Empty;
        // Voer de zoekopdracht uit als de input minstens 3 tekens lang is (werkt nog niet)
        if (!string.IsNullOrWhiteSpace(formModel.Email) && formModel.Email.Length >= 3)
        {
            suggestedUsers = await SearchUsersByEmail(formModel.Email);
            StateHasChanged();
        }
        else
        {
            suggestedUsers.Clear();
            StateHasChanged();
        }
    }

    // Methode om gebruikers op te zoeken met API met de e-mail
    private async Task<List<UserDto>> SearchUsersByEmail(string email)
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7256/user/search?email={email}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                return JsonConvert.DeserializeObject<List<UserDto>>(content) ?? new List<UserDto>(); // Als "sonConvert.DeserializeObject<List<UserDto>>(content)" NULL is dan wordt er een nieuwe lijst gemaakt
            }
            else
            {
                Console.WriteLine($"Serverfout bij zoeken: {await response.Content.ReadAsStringAsync()}");
                return new List<UserDto>(); // Retourneer lege lijst bij serverfouten
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error bij zoeken: {ex.Message}");
            return new List<UserDto>();
        }
    }

    // Wanneer een gebruiker wordt geselecteerd uit de suggesties
    private void SelectUser(UserDto user)
    {
        selectedUser = user;
        formModel.Email = user.Email;
        suggestedUsers.Clear();
    }

    // Methode om geforceerd een zoekopdracht uit te voeren wanneer op de button wordt geklikt.
    private async Task PerformSearch()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(formModel.Email))
            {
                suggestedUsers = await SearchUsersByEmail(formModel.Email);
                searchPerformed = true;
                ErrorMessage = ""; // Reset foutmelding na succesvolle actie
            }
            else
            {
                suggestedUsers.Clear();
                searchPerformed = false;
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Zoeken mislukt. Controleer de verbinding en probeer het opnieuw."; // Log de uitzondering en toon een foutbericht
            Console.WriteLine($"Zoekfout: {ex.Message}");
            suggestedUsers.Clear();
            searchPerformed = false;
        }
    }
}
