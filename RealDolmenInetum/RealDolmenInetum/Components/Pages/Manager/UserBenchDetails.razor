@page "/user/{Id}"
@using ModelLibrary.ViewModels
@using ModelLibrary.Models
@using ModelLibrary.Dto
@using RealDolmenInetum.Components.Pages.General
@using RealDolmenInetum.Components.Pages.Manager
@using Newtonsoft.Json
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject HttpClient Http
@inject ISnackbar Snackbar
@using System
@inject IDialogService DialogService
@inject AuthService auth


@if (currentUserId == currentManagerUserId.ToString() || rol == "admin" || rol == "manager")
{
    <MudButton Href="/home" FullWidth="true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary">Terug</MudButton>
    <div class="card-body">
        @if (usersDetails != null)
        {
            <h3 class="text-center">@usersDetails.UserName op de bench sinds: @usersDetails.StartBench.ToString("dd-MM-yyyy") (@daysOnBench dagen)</h3>
            <MudExpansionPanels MultiExpansion="true">
                <MudExpansionPanel Text="Gebruikersdetails">
                    <div>
                        <h5>Projectgeschiedenis:</h5>
                        @if (usersDetails.ProjectDetails != null && usersDetails.ProjectDetails.Any())
                        {
                            <ul class="list-group">
                                @foreach (var detail in usersDetails.ProjectDetails)
                                {
                                    <li class="list-group-item">@detail</li>
                                }
                            </ul>
                        }
                        else
                        {
                        <li class="list-group-item">Nog geen projecten.</li>
                        }

                    <br />
                    <h5>Activiteit:</h5>
                        @if (usersDetails.OccupationDetails != null)
                        {
                        <ul class="list-group">
                            <li class="list-group-item">@usersDetails.OccupationDetails</li>
                        </ul>
                        }
                        else
                        {
                        <ul class="list-group">
                            <li class="list-group-item">Momenteel geen activiteit.</li>
                        </ul>
                        }
                    <br />

                        @*<MudGrid>
            <MudItem xs="12" sm="6" md="4">
            <MudTextField Label="Bench Manager" Variant="Variant.Filled" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AccountCircle" Value="@($"{usersDetails.BenchManagerFirstName} {usersDetails.BenchManagerLastName}")" ReadOnly="true"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="6" md="4" Class="d-flex align-items-center">
            <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
            Wijzigen
            </MudButton>
            </MudItem>
            </MudGrid>*@
                    <div class="form-check form-switch">
                        <label class="form-check-label" for="flexSwitchCheckDefault">Is Bench Manager</label>
                        <input class="form-check-input" type="checkbox" @onclick="ToggleManagerStatus" checked="@isManager" />
                    </div>
        </div>
                    @*@bind-Value="usersDetails.IsCurrentBenchManager"*@
                    </MudExpansionPanel>
                </MudExpansionPanels>

        }
        else
        {
        <p>Gegevens worden geladen of zijn niet beschikbaar.</p>
        }

    </div>
    <input type="number" @bind="benchId" class="form-control mb-2" placeholder="Bench ID" readonly />
    <MudButton Href="/home" FullWidth="true" @onclick="Einde" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Primary">Einde</MudButton>
} else
{
    <div class="container mt-5">
        <div class="alert alert-danger" role="alert">
            U hebt niet de rechten om deze pagina te bekijken.
        </div>
    </div>
}



@code {
    [Parameter]
    public string Id { get; set; }
    [Parameter]
    public int BenchId { get; set; }

    public UserDetailsViewModel usersDetails;
    public BenchViewModel benchView;
    public HttpClient httpClient = new HttpClient();
    public int benchId;
    public string ErrorMessage = "";
    private int daysOnBench;
    bool isManager;
    private string rol;
    private string currentUserId;
    private int currentManagerUserId;



    protected override async Task OnInitializedAsync()
    {
        rol = auth.GetRolFromLoggedUser();
        currentUserId = auth.GetIdFromLoggedUser();
        await FetchUserData();
        await FetchBenchManagerDetails();
        await FetchUserBenchId();
    }
    public async Task FetchUserData()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7256/user/" + @Id);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                usersDetails = JsonConvert.DeserializeObject<UserDetailsViewModel>(content);

                // gebruik date helper om de aantal dagen since de startdate te berekenen
                if (usersDetails != null)
                {
                    daysOnBench = RealDolmenInetum.Helper.DateHelper.CalculateDaysSince(usersDetails.StartBench);
                }

                if (usersDetails.OccupationId.HasValue)
                {
                    var occupationResponse = await Http.GetAsync($"https://localhost:7256/occupation/{usersDetails.OccupationId.Value}");

                    //ophalen van occupation met een andere endpoint
                    if (occupationResponse.IsSuccessStatusCode)
                    {
                        var occupationContent = await occupationResponse.Content.ReadAsStringAsync();
                        var occupation = JsonConvert.DeserializeObject<Occupation>(occupationContent);
                        usersDetails.OccupationDetails = occupation.Type;
                    }
                }
            }
            else
            {
                ErrorMessage = "Fout bij het ophalen van gegevens uit de database.";
                usersDetails = new UserDetailsViewModel();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden: {ex.Message}";
            usersDetails = new UserDetailsViewModel();
        }
    }


    // TODO // DIALOG GEBRUIKEN OM DELETE TE BEVESTIGEN // TODO //
    private async Task Einde()
    {
        // tijdelijk via variable
        var url = $"https://localhost:7256/user/bench/end/{benchId}";

        var requestBody = new UpdateEndBenchDto
            {
                EndBench = DateTime.UtcNow
            };

        var content = JsonContent.Create(requestBody);

        var response = await Http.PutAsync(url, content);

        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Gebruiker zit niet meer op de bench!" , Severity.Success);
            NavigationManager.NavigateTo("/home");

        }
        else
        {
        }
    }

    private async Task FetchUserBenchId()
    {
        try
        {
            var response = await Http.GetAsync($"https://localhost:7256/user/bench/user-bench/{Id}");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var benchInfo = JsonConvert.DeserializeObject<BenchViewModel>(content);
                benchId = benchInfo.BenchId;
            }
            else
            {
                ErrorMessage = "Fout bij het ophalen van bench ID uit de database.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden bij het ophalen van bench ID: {ex.Message}";
        }
    }

    public async Task FetchBenchManagerDetails()
    {
        if (usersDetails.IsCurrentBenchManager.HasValue)
        {
            var managerResponse = await Http.GetAsync($"https://localhost:7256/user/userInfo/{usersDetails.IsCurrentBenchManager.Value}");

            if (managerResponse.IsSuccessStatusCode)
            {
                var managerContent = await managerResponse.Content.ReadAsStringAsync();
                var managerInfo = JsonConvert.DeserializeObject<BenchManagerViewModel>(managerContent);
                usersDetails.BenchManagerFirstName = managerInfo.First_Name;
                usersDetails.BenchManagerLastName = managerInfo.Last_Name;

                //StateHasChanged(); // Forceer de UI om te updaten
            }
            else
            {
                Snackbar.Add("Fout bij het ophalen van Bench Manager gegevens.", Severity.Error);
            }
        }
    }

    private async Task UpdateBenchManagerStatus()
    {
        if (usersDetails.IsCurrentBenchManager.HasValue)
        {
            var response = await Http.PutAsync($"https://localhost:7256/user/bench/updateManager/{benchId}/{usersDetails.IsCurrentBenchManager}", null);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Manager status succesvol bijgewerkt!");
            }
            else
            {
                Console.WriteLine("Fout bij het bijwerken van de manager status.");
            }
        }
        else
        {
            Console.WriteLine("Manager status kan niet worden bijgewerkt omdat de waarde onbepaald is.");
        }
    }

    private async Task ToggleManagerStatus()
    {
        isManager = !isManager;

        if (usersDetails.IsCurrentBenchManager.HasValue)
        {
            usersDetails.IsCurrentBenchManager = !usersDetails.IsCurrentBenchManager.Value;
        }
        else
        {
            usersDetails.IsCurrentBenchManager = true;
        }
        await UpdateBenchManagerStatus();
    }


    // Deze mag weg, heet te maken met currentbench manager update
    private void OpenDialog()
    {
        DialogOptions options = new DialogOptions() { CloseOnEscapeKey = true };

        // Maak een nieuwe instance van DialogParameters
        var parameters = new DialogParameters();

        // Voeg de volledige naam en benchId toe als parameters
        string fullName = $"{usersDetails.BenchManagerFirstName} {usersDetails.BenchManagerLastName}";
        parameters.Add("Name", fullName);
        parameters.Add("BenchId", benchId);
        if (usersDetails.IsCurrentBenchManager.HasValue)
        {
            parameters.Add("CurrentBenchManagerId", usersDetails.IsCurrentBenchManager.Value);
        }
        else
        {
            parameters.Add("CurrentBenchManagerId", null);
        }
        parameters.Add("Id", Id);

        DialogService.Show<ManagerUpdateDialog>("Manager bijwerken", parameters, options);
    }

    private async Task FetchCurrentBenchManager()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7256/user/bench/CurrentBenchManager");
            if (response.IsSuccessStatusCode)
            {
                var manager = await response.Content.ReadFromJsonAsync<BenchManagerDto>();
                currentManagerUserId = manager.userId;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error bij het ophalen van de huidige bench manager: {ex.Message}");
        }
    }

}
