@page "/activiteit"
@rendermode InteractiveServer
@using ModelLibrary.Models
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Activiteit selectie</PageTitle>


@if (occupations.Any())
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-8">
                <div class="card mb-3">
                    <div class="card-body">
                        <h1>Welke activiteit ga je starten?</h1>

                        <form action="#">
                            <div class="mb-3">
                                <label for="benchId" class="form-label">Bench ID:</label>
                                <input type="number" class="form-control" id="benchId" @bind="benchId">

                                <label for="activiteiten" class="form-label">Kies een activiteit:</label>
                                <select class="form-select" id="activiteiten" @bind="selectedOccupationType">
                                    @foreach (var occupation in occupations)
                                    {
                                        <option value="@occupation.Type">@occupation.Type</option>
                                    }
                                </select>
                            </div>


                            <MudButton OnClick="UpdateOccupation" FullWidth="true" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Primary">Opslaan</MudButton>
                        </form>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
            <aside id="cardContainer">
                    @foreach (var occupation in occupations)
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <h2>@occupation.Type</h2>
                                <p>@occupation.Remark</p>
                            </div>
                        </div>
                    }
				</aside>
			</div>
        </div>
    </div>
}
else if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <h1>@ErrorMessage</h1>
}
else
{
    <h1>Geen activiteiten, probeer later opnieuw.</h1>
}


@code {
    public List<Occupation> occupations = new List<Occupation>();
    public string ErrorMessage = "";
    private int benchId;
    private string selectedOccupationType;

    protected override async Task OnInitializedAsync()
    {
        await FetchOccupations();
    }

    // Data ophalen uit de api en daar een lijst mee vullen maken
    public async Task FetchOccupations()
    {
        try
        {
            var response = await Http.GetAsync("https://localhost:7256/occupation");
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                occupations = JsonConvert.DeserializeObject<List<Occupation>>(content);
            }
            else
            {
                ErrorMessage = "Kon de activiteiten niet ophalen uit de database.";
                occupations = new List<Occupation>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Een fout is opgetreden: {ex.Message}");
            ErrorMessage = "Er is een probleem opgetreden bij  het ophalen van de activiteiten. Probeer het later opnieuw.";
            occupations = new List<Occupation>();
        }
    }

    private async Task UpdateOccupation()
    {
        var updateUrl = $"https://localhost:7256/user/bench/occupation/{benchId}";

        var response = await Http.PutAsJsonAsync(updateUrl, new { type = selectedOccupationType });
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/activiteit/einde?benchId={benchId}");
        }
        else
        {
            ErrorMessage = "Fout bij het updaten van de activiteit.";
        }
    }
}
