@inject HttpClient Http
@using ModelLibrary.Models
@using ModelLibrary.Dto
@inject NavigationManager NavigationManager
@using System
@inject ISnackbar Snackbar

<EditForm Model="@OccupationHistory" OnValidSubmit="Save">
    <div class="container mt-3">
        <div class="mb-3">
            <label for="occupationSelect" class="form-label">Occupatie:</label>
            <select @bind="OccupationHistory.OccupationId" id="occupationSelect" class="form-select">
                @foreach (var occupation in Occupations)
                {
                    <option value="@occupation.Id">@occupation.Type</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="startDate" class="form-label">Startdatum:</label>
            <InputDate id="startDate" @bind-Value="OccupationHistory.StartDate" class="form-control" />
        </div>
        <div class="mb-3">
            <label for="endDate" class="form-label">Einddatum:</label>
            <InputDate id="endDate" @bind-Value="OccupationHistory.EndDate" class="form-control" />
        </div>
        <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary">Opslaan</button>
        </div>
    </div>
    <p class="text-center mt-3">@BenchId</p>
</EditForm>


@code {
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    [Parameter] public OccupationHistoryDto OccupationHistory { get; set; }
    [Parameter] public List<Occupation> Occupations { get; set; }
    [Parameter] public int BenchId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Occupations = await FetchOccupationsAsync();
    }

    // Geeft een lijst van occupations (type)
    private async Task<List<Occupation>> FetchOccupationsAsync()
    {
        var response = await Http.GetFromJsonAsync<List<Occupation>>("https://localhost:7256/occupation");
        return response ?? new List<Occupation>();
    }

    // Update een occupationHistory record.
    private async Task Save()
    {
        // Stuur eerst de update naar de OccupationHistory
        var response = await Http.PutAsJsonAsync($"https://localhost:7256/occupationHistory/update/{OccupationHistory.Id}", OccupationHistory);
        if (response.IsSuccessStatusCode && OccupationHistory.EndDate.HasValue)
        {
            // Als de EndDate is ingesteld, stuur dan een request om de occupation_id van de bench op NULL te zetten
            await Http.PutAsync($"https://localhost:7256/user/bench/clearOccupation/{BenchId}", null);
            MudDialog.Close(DialogResult.Ok(true));
        }
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add("Record succesvol bijgewerkt.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Er is een fout opgetreden bij het bijwerken van de record.", Severity.Error);
        }
    }

} 
