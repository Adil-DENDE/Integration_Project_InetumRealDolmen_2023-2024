@page "/activiteit/geschiedenis"
@using ModelLibrary.Models
@using ModelLibrary.Dto
@using Newtonsoft.Json
@using Components.Pages.Bencher
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IDialogService DialogService
@inject AuthService auth

<PageTitle>Activiteiten geschiedenis</PageTitle>

@if (auth.GetRolFromLoggedUser() == "admin")
{
    <MudText Typo="Typo.h6">Enter Bench ID:</MudText>

    <MudNumericField @bind-Value="@BenchId" Label="Bench ID" Variant="Variant.Outlined" HideSpinButtons />

    <MudButton OnClick="@LoadData" Color="Color.Primary">Load Data</MudButton>
}


@if (occupationHistories.Any())
{
    <MudTable Items="@occupationHistories" Dense="true" Hover="true" Striped="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Occupation Histories</MudText>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Activiteit</MudTh>
            <MudTh>Start Date</MudTh>
            <MudTh>End Date</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Occupation Type">@context.OccupationType</MudTd>
                <MudTd DataLabel="Start Date">@context.StartDate.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="End Date">@context.EndDate?.ToString("dd-MM-yyyy")</MudTd>
                <MudTd>
                    <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(e => EditRecord(context))" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[]{5, 10, 15}" />
            </PagerContent>
        </MudTable>
}
else
{
    <MudAlert Class="mt-3" Severity="Severity.Info" ContentAlignment="HorizontalAlignment.Center">
        Je hebt nog geen activiteitengeschiedenis, of je staat momenteel niet op de bench.
    </MudAlert>
}

@code {
    [Parameter]
    public int BenchId { get; set; }
    private List<OccupationHistoryDto> occupationHistories = new List<OccupationHistoryDto>();
    private List<Occupation> occupations = new List<Occupation>();
    public bool loadSuccessful { get; set; }
    public string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        await getUserBenchId();
        await LoadData();
        occupations = await Http.GetFromJsonAsync<List<Occupation>>("https://localhost:7256/occupation");
    }




    private async Task<string> getUserBenchId()
    {
        try
        {
            var userId = auth.GetIdFromLoggedUser();
            var response = await Http.GetAsync("https://localhost:7256/user/" + userId);
            if (response.IsSuccessStatusCode)
            {
                var userJson = await response.Content.ReadAsStringAsync();
                var user = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(userJson);
                BenchId = user.benchId;
                return user.benchId;
            }
            else
            {
                return $"Error: Status code {response.StatusCode} received.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Er is een onverwachte fout opgetreden: {ex.Message}";
            return $"Error: '{ex.Message}'";
        }
    }


    private async Task LoadData()
    {
        loadSuccessful = true;
        occupationHistories.Clear();

        if (BenchId > 0)
        {
            try
            {
                var fetchedData = await Http.GetFromJsonAsync<List<OccupationHistoryDto>>($"https://localhost:7256/occupationHistory/{BenchId}");

                if (fetchedData != null && fetchedData.Any())
                {
                    occupationHistories = fetchedData
                        .OrderBy(o => o.EndDate.HasValue)
                        .ThenByDescending(o => o.EndDate)
                        .ToList();

                    foreach (var history in occupationHistories)
                    {
                        var occupationResponse = await Http.GetFromJsonAsync<Occupation>($"https://localhost:7256/occupation/{history.OccupationId}");
                        if (occupationResponse != null)
                        {
                            history.OccupationType = occupationResponse.Type;
                        }
                    }
                }
                else
                {
                    loadSuccessful = false;
                }
            }
            catch (Exception)
            {
                loadSuccessful = false;
            }
        }
        else
        {
            loadSuccessful = false;
        }
    }

    // Open een dialoog om de geselecteerde record te wijzigen
    private async Task EditRecord(OccupationHistoryDto record)
    {
        var parameters = new DialogParameters
            {
                ["OccupationHistory"] = record,
                ["Occupations"] = occupations,
                ["BenchId"] = BenchId
            };

        var dialog = DialogService.Show<EditOccupationHistoryDialog>("Bewerk Record", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await LoadData();
        }
    }
}
