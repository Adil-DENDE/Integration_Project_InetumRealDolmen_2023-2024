@page "/occupationHistory"
@using ModelLibrary.Models
@using ModelLibrary.Dto
@using Newtonsoft.Json
@using Components.Pages.Bencher
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject IDialogService DialogService

<PageTitle>Occupation History</PageTitle>

<MudText Typo="Typo.h6">Enter Bench ID:</MudText>
<MudTextField @bind-Value="@BenchIdString" Label="Bench ID" Variant="Variant.Outlined" />
<MudButton OnClick="@LoadData" Color="Color.Primary">Load Data</MudButton>

@if (!int.TryParse(BenchIdString, out _))
{
    <div class="alert alert-warning" role="alert">
        Voer een geldige Bench ID in.
    </div>
}

else if (occupationHistories.Any())
{
<MudTable Items="@occupationHistories" Dense="true" Hover="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Occupation Histories</MudText>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Activiteit</MudTh>
        <MudTh>Start Date</MudTh>
        <MudTh>End Date</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Occupation Type">@context.OccupationType</MudTd>
            <MudTd DataLabel="Start Date">@context.StartDate.ToString("dd-MM-yyyy")</MudTd>
            <MudTd DataLabel="End Date">@context.EndDate?.ToString("dd-MM-yyyy")</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Filled.Edit" OnClick="@(e => EditRecord(context))" />
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{5, 10, 15}" />
        </PagerContent>
    </MudTable>
} else {
    <div class="alert alert-info" role="alert">
        Nog geen activiteiten.
    </div>
}

    @code {
    [Parameter]
    public int BenchId { get; set; }
    public string BenchIdString { get; set; } = "";
    private List<OccupationHistoryDto> occupationHistories = new List<OccupationHistoryDto>();
    private List<Occupation> occupations = new List<Occupation>();
    public bool loadSuccessful { get; set; }
    public bool notNumber { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        occupations = await Http.GetFromJsonAsync<List<Occupation>>("https://localhost:7256/occupation");
    }

    private async Task LoadData()
    {
        loadSuccessful = true;
        notNumber = false;
        occupationHistories.Clear();

        if (int.TryParse(BenchIdString, out var id))
        {
            BenchId = id;
            try
            {
                var fetchedData = await Http.GetFromJsonAsync<List<OccupationHistoryDto>>($"https://localhost:7256/occupationHistory/{BenchId}");

                if (fetchedData != null && fetchedData.Any())
                {
                    // Sorteer eerst op NULL EndDates, dan op de meest recente naar oudere EndDates
                    occupationHistories = fetchedData
                        .OrderBy(o => o.EndDate.HasValue)
                        .ThenByDescending(o => o.EndDate)
                        .ToList();

                    foreach (var history in occupationHistories)
                    {
                        var occupationResponse = await Http.GetFromJsonAsync<Occupation>($"https://localhost:7256/occupation/{history.OccupationId}");
                        if (occupationResponse != null)
                        {
                            history.OccupationType = occupationResponse.Type;
                        }
                    }
                }
                else
                {
                    // Als fetchedData null is of leeg, behandel het als een succesvolle laadoperatie met geen data
                    loadSuccessful = false;
                }
            }
            catch (Exception)
            {
                //mislukt als er een exception optreedt
                loadSuccessful = false;
            }
        }
        else
        {
            // Als BenchIdString niet naar een int kan worden geparseerd
            loadSuccessful = false;
        }
    }


    // Open een dialoog om de geselcteerde record te weizigen
    private async Task EditRecord(OccupationHistoryDto record)
    {
        var parameters = new DialogParameters
            {
                ["OccupationHistory"] = record,
                ["Occupations"] = occupations,
                    ["BenchId"] = BenchId
            };

        var dialog = DialogService.Show<EditOccupationHistoryDialog>("Bewerk Record", parameters);
        var result = await dialog.Result;


        if (!result.Cancelled)
        {
            await LoadData();
        }
    }
}


